"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hightlightLines = exports.isEqualArray = void 0;
function isEqualArray(a, b) {
    if (a.length !== b.length)
        return false;
    for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i])
            return false;
    }
    return true;
}
exports.isEqualArray = isEqualArray;
function escapeChar(match) {
    switch (match) {
        case '&':
            return '&amp;';
        case '"':
            return '&quot;';
        case "'":
            return '&#39;';
        case '<':
            return '&lt;';
        case '>':
            return '&gt;';
        case ' ':
            return '&nbsp;';
        default:
            return match;
    }
}
function escapeString(inp) {
    return inp.replace(/[&"'<>]/g, escapeChar);
}
function escapeStringNbsp(inp) {
    return inp.replace(/[&"'<> ]/g, escapeChar);
}
function pushScope(scopeStack, scope, html) {
    scopeStack.push(scope);
    html.push(`<span class="${scope.replace(/\.+/g, ' ')}">`);
}
function popScope(scopeStack, html) {
    scopeStack.pop();
    html.push('</span>');
}
function updateScopeStack(scopeStack, desiredScopes, html) {
    let excessScopes = scopeStack.length - desiredScopes.length;
    if (excessScopes > 0)
        while (excessScopes--)
            popScope(scopeStack, html);
    let lasti = 0;
    for (let i = scopeStack.length; i >= 0; --i) {
        if (isEqualArray(scopeStack.slice(0, i), desiredScopes.slice(0, i))) {
            lasti = i;
            break;
        }
        popScope(scopeStack, html);
    }
    for (let j = lasti; j < desiredScopes.length; ++j) {
        pushScope(scopeStack, desiredScopes[j], html);
    }
}
function* hightlightLines(lines, scopeName, nullScope, nbsp) {
    const registry = atom.grammars.textmateRegistry || atom.grammars;
    if (!registry)
        throw new Error('No Atom grammar registry found');
    const grammar = registry.grammarForScopeName(scopeName) ||
        (nullScope ? registry.grammarForScopeName(nullScope) : undefined);
    if (!grammar) {
        throw new Error(`Grammar ${scopeName} not found, and no ${nullScope} grammar`);
    }
    const escape = nbsp ? escapeStringNbsp : escapeString;
    const lit = lines[Symbol.iterator]();
    let line = lit.next();
    let stack = null;
    const scopeStack = [];
    while (!line.done) {
        const tokens = grammar.tokenizeLine(line.value, stack);
        stack = tokens.ruleStack;
        const res = [];
        for (const { value, scopes } of tokens.tokens) {
            const newScopes = scopes.map((s) => `syntax--${s.replace(/\./g, '.syntax--')}`);
            updateScopeStack(scopeStack, newScopes, res);
            res.push(escape(value));
        }
        while (scopeStack.length > 0)
            popScope(scopeStack, res);
        yield res.join('');
        line = lit.next();
    }
}
exports.hightlightLines = hightlightLines;
//# sourceMappingURL=data:application/json;base64,